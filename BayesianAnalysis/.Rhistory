index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
# load in data----------------------------------------------------------
## getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
# Read in results file
results <- read.pcibex("../results.csv")
head(results)
slider_values <- results %>% filter(Label == 'trials') %>%
filter(PennElementName == 'slider') %>%
select(Value)
slider_values
results %>%
summarise(mean_RT = mean(reactionTime),
sd_RT = sd(reactionTime))
reactionTime
results %>%
group_by(MD5.hash.of.participant.s.IP.address) %>%
summarise(mean_RT = mean(reactionTime),
sd_RT = sd(reactionTime))
# User-defined function to read in PCIbex Farm results files
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
# load in data----------------------------------------------------------
## getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
# Read in results file
results <- read.pcibex("../results.csv")
head(results)
results %>%
group_by(MD5.hash.of.participant.s.IP.address) %>%
summarise(mean_RT = mean(reactionTime),
sd_RT = sd(reactionTime))
results %>%
group_by(MD5.hash.of.participant.s.IP.address) %>%
summarize(mean_RT = mean(reactionTime),
sd_RT = sd(reactionTime))
results %>%
group_by(MD5.hash.of.participant.s.IP.address) %>%
summarize(mean_RT = mean(reactionTime),
sd_RT = sd(reactionTime))
mean(results$reactionTime)
mean(results$reactionTime)
min(results$reactionTime)
results$reactionTime
max(results$reactionTime)
results %>%
group_by(MD5.hash.of.participant.s.IP.address) %>%
summarize(mean_RT = mean(reactionTime, na.rm = TRUE),
sd_RT = sd(reactionTime))
results %>%
group_by(MD5.hash.of.participant.s.IP.address) %>%
summarize(mean_RT = mean(reactionTime, na.rm = TRUE),
sd_RT = sd(reactionTime,  na.rm = TRUE))
results %>%
group_by(MD5.hash.of.participant.s.IP.address) %>%
summarize(mean_RT = mean(reactionTime, na.rm = TRUE),
sd_RT = sd(reactionTime, na.rm = TRUE))
mean(results$reactionTime, na.rm = TRUE)*134
mean(results$reactionTime, na.rm = TRUE)*134 / 60
mean(results$reactionTime, na.rm = TRUE)/1000*134 / 60
min(results$reactionTime, na.rm = TRUE)/ 1000*134 / 60
max(results$reactionTime, na.rm = TRUE)/ 1000*134 / 60
mean(results$reactionTime, na.rm = TRUE)/ 1000*134 / 60
# 11.88 min.
```
results %>%
group_by(MD5.hash.of.participant.s.IP.address) %>%
summarize(mean_RT = mean(reactionTime, na.rm = TRUE),
sd_RT = sd(reactionTime, na.rm = TRUE))
mean(results$reactionTime, na.rm = TRUE)/ 1000*134 / 60
# 11.88 min.
q()
install.packages("rjags")
.libPaths()
library(BEST)
install.packages("BEST")
getwd()
getwd()
setwd(current_directory)
current_directory <- getwd()
setwd(current_directory)
df <- read.csv('data_for_R.csv')
getwd()
setwd(normalizePath(dirname(rstudioapi::getActiveDocumentContext()$path)))
df <- read.csv('data_for_R.csv')
df
install.packages("BEST")
install.packages(c("coda", "jags"))
url <- "https://cran.r-project.org/src/contrib/Archive/BEST/BEST_0.5.4.tar.gz"
pkgFile <- "BEST_0.5.4.tar.gz"
download.file(url = url, destfile = pkgFile)
# Install package
install.packages(pkgs=pkgFile, type="source", repos=NULL)
install.packages(c("coda", "jags"))
R.version()
R.Version()
# Install dependencies list in the DESCRIPTION file
library(coda)
install.packages("jags")
install.packages("rjags")
# Install package
install.packages(pkgs=pkgFile, type="source", repos=NULL)
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/kkobrock/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/kkobrock/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/kkobrock/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/kkobrock/homebrew/opt/jags/lib'"
)
library(rjags)
# Install package
install.packages(pkgs=pkgFile, type="source", repos=NULL)
library(BEST)
df
context_aware_generic_concepts <- df[index==0]
context_aware_generic_concepts <- df[(index==0)]
context_aware_generic_concepts <- df %>%
filter(index == 0)
library(tidyverse)
context_aware_generic_concepts <- df %>%
filter(index == 0)
context_aware_generic_concepts
context_aware_generic_concepts <- df %>%
filter(index == 0, condition == 'context_aware')
context_aware_generic_concepts <- df %>%
filter(index == 0, condition == 'context_aware') %>%
select(index, concept, condition)
context_aware_generic_concepts
context_unaware_generic_concepts <- df %>%
filter(index == 0, condition == 'context_unaware') %>%
select(index, concept, condition)
best_out = best.analyze_two(context_aware_generic_concepts, context_unaware_generic_concepts)
best_out = best.analyze_two(context_aware_generic_concepts, context_unaware_generic_concepts)
library(BEST)
df
df %>%
group_by(condition) %>%
summarize(mean = mean(context))
df %>%
#group_by(condition) %>%
summarize(mean = mean(context))
df %>%
summarize(mean = mean(concept))
mean_context <- df %>%
summarize(mean = mean(context))
mean_concept <- df %>%
summarize(mean = mean(concept))
grand_mean <- mean(mean_context, mean_concept)
grand_mean <- mean(c(mean_context, mean_concept))
grand_mean <- (mean_context + mean_concept)/2
mean_context <- df %>%
summarize(mean = mean(context),
sd = sd(context))
mean_context <- df %>%
summarize(mean = mean(context),
sd = sd(context)) %>%
print()
mean_concept <- df %>%
summarize(mean = mean(concept),
sd = sd(concept))
agg_context <- df %>%
summarize(mean = mean(context),
sd = sd(context)) %>%
print()
agg_concept <- df %>%
summarize(mean = mean(concept),
sd = sd(concept))
grand_mean <- (agg_context[0] + agg_concept[0])/2
grand_mean
agg_context
agg_context$mean
grand_mean <- (agg_context$mean + agg_concept$mean)/2
grand_mean
grand_sd <- (agg_context$sd + agg_concept$sd)/2
priors <- list(muM = grand_mean, muSD = grand_sd)
priors
BESTout <- BESTmcmc(context_aware_generic_concepts, context_unaware_generic_concepts, priors=priors, parallel=FALSE)
y1 <- c(5.77, 5.33, 4.59, 4.33, 3.66, 4.48)
type(y1)
typeof(y1)
typeof(context_aware_generic_concepts)
context_aware_generic_concepts
context_aware_generic_concepts <- df %>%
filter(index == 0, condition == 'context_aware') %>%
select(index, concept, condition)
context_aware_generic_concepts$concept
typeof(context_aware_generic_concepts$concept)
BESTout <- BESTmcmc(context_aware_generic_concepts$concept, context_unaware_generic_concepts$concept, priors=priors, parallel=FALSE)
plot(BESTout)
context_aware_coarse_contexts <- df %>%
filter(index == 0, condition == 'context_aware') %>%
select(index, context, condition)
context_unaware_coarse_contexts <- df %>%
filter(index == 0, condition == 'context_unaware') %>%
select(index, context, condition)
BESTout <- BESTmcmc(context_aware_coarse_contexts$context, context_unaware_coarse_contexts$context, priors=priors, parallel=FALSE)
plot(BESTout)
BESTout <- BESTmcmc(context_unaware_coarse_contexts$context, context_aware_coarse_contexts$context, priors=priors, parallel=FALSE)
plot(BESTout)
plot(BESTout, compVal=1, ROPE=c(-0.1,0.1))
plot(BESTout, compVal=1, ROPE=c(-0.01,0.01))
summary(BESTout)
print(BESTout)
plotPostPred(BESTout)
plotAll(BESTout)
library(bayestestR)
rope <- bayestestR::rope_range(df)
rope <- bayestestR::rope_range(df$concept)
rope <- bayestestR::rope_range(BESTout)
rope <- c(-0.1*grand_sd, 0.1*grand_sd)
rope
rope <- c(-0.1*agg_context$sd, 0.1*agg_context$sd)
rope
rope <- c(-0.1*agg_context$sd, 0.1*agg_concept$sd)
rope
plot(BESTout, compVal=1, ROPE=rope)
BESTout <- BESTmcmc(context_aware_coarse_contexts$context, context_unaware_coarse_contexts$context, priors=priors, parallel=FALSE)
plot(BESTout, compVal=1, ROPE=rope)
BESTgeneric <- BESTmcmc(context_unaware_generic_concepts$concept, context_aware_generic_concepts$concept, priors=priors, parallel=FALSE)
BESTcoarse <- BESTmcmc(context_unaware_coarse_contexts$context, context_aware_coarse_contexts$context, priors=priors, parallel=FALSE)
context_aware_generic_concepts <- df %>%
filter(index == 5, condition == 'context_aware') %>%
select(index, concept, condition)
context_aware_generic_concepts <- df %>%
filter(index == 5, condition == 'context_aware') %>%
select(index, concept, condition) %>%
print()
context_aware_generic_concepts <- df %>%
filter(index == 4, condition == 'context_aware') %>%
select(index, concept, condition) %>%
print()
context_aware_coarse_contexts <- df %>%
filter(index == 4, condition == 'context_aware') %>%
select(index, context, condition) %>%
print()
context_aware_coarse_contexts <- df %>%
filter(index == 5, condition == 'context_aware') %>%
select(index, context, condition) %>%
print()
context_aware_generic_concepts <- df %>%
filter(index == 0, condition == 'context_aware') %>%
select(index, concept, condition)
context_unaware_generic_concepts <- df %>%
filter(index == 0, condition == 'context_unaware') %>%
select(index, concept, condition)
context_aware_specific_concepts <- df %>%
filter(index == 4, condition == 'context_aware') %>%
select(index, concept, condition)
context_unaware_specific_concepts <- df %>%
filter(index == 4, condition == 'context_unaware') %>%
select(index, concept, condition)
context_aware_coarse_contexts <- df %>%
filter(index == 0, condition == 'context_aware') %>%
select(index, context, condition)
context_unaware_coarse_contexts <- df %>%
filter(index == 0, condition == 'context_unaware') %>%
select(index, context, condition)
context_aware_fine_contexts <- df %>%
filter(index == 4, condition == 'context_aware') %>%
select(index, context, condition)
context_unaware_fine_contexts <- df %>%
filter(index == 4, condition == 'context_unaware') %>%
select(index, context, condition)
context_aware_specific_concepts <- df %>%
filter(index == 4, condition == 'context_aware') %>%
select(concept)
BESTspecific <- BESTmcmc(context_unaware_specific_concepts$concept, context_aware_specific_concepts, priors=priors, parallel=FALSE)
BESTspecific <- BESTmcmc(context_unaware_specific_concepts$concept, context_aware_specific_concepts$concept, priors=priors, parallel=FALSE)
BESTfine <- BESTmcmc(context_unaware_fine_contexts$concept, context_aware_fine_contexts$concept, priors=priors, parallel=FALSE)
priors <- list(muM = grand_mean, muSD = grand_sd)
BESTfine <- BESTmcmc(context_unaware_fine_contexts$concept, context_aware_fine_contexts$concept, priors=priors, parallel=FALSE)
BESTspecific <- BESTmcmc(context_unaware_specific_concepts$concept, context_aware_specific_concepts$concept, priors=priors, parallel=FALSE)
BESTfine <- BESTmcmc(context_unaware_fine_contexts$context, context_aware_fine_contexts$context, priors=priors, parallel=FALSE)
# check for convergence
print(BESTgeneric)
print(BESTspecific)
print(BESTcoarse)
print(BESTfine)
meanDiff_generic <- (BESTgeneric$mu1 - BESTgeneric$mu2)
meanDiff_generic
meanDiff_generic <- mean(BESTgeneric$mu1 - BESTgeneric$mu2)
meanDiff_generic
meanDiff_generic <- mean((BESTgeneric$mu1 - BESTgeneric$mu2) > 0)
meanDiff_generic
meanDiff_generic <- (BESTgeneric$mu1 - BESTgeneric$mu2)
meanDiff_genericGTzero <- mean(meanDiff > 0)
meanDiff_genericGTzero <- mean(meanDiff_generic > 0)
meanDiff_genericGTzero
BESTgeneric$mu1
hdi(BESTgeneric$mu1 - BESTgeneric$mu2)
meanDiff_generic <- mean(Diff_generic)
hdiDiff_generic <- hdi(BESTgeneric$mu1 - BESTgeneric$mu2)
meanDiff_generic
Diff_generic <- (BESTgeneric$mu1 - BESTgeneric$mu2)
meanDiff_generic <- mean(Diff_generic)
hdiDiff_generic <- hdi(BESTgeneric$mu1 - BESTgeneric$mu2)
meanDiff_generic
hdiDiff_generic
plotAll(BESTgeneric)
plot(BESTgeneric, compVal=1, ROPE=rope)
summary(BESTgeneric)
meanDiff_generic <- mean(Diff_generic)
meanDiff_generic
meanDiff_generic <- round(mean(Diff_generic),3)
meanDiff_generic
hdiDiff_generic <- hdi(BESTgeneric$mu1 - BESTgeneric$mu2)
hdiDiff_generic
Diff_specific <- (BESTspecific$mu1 - BESTgeneric$mu2)
Diff_specific <- (BESTspecific$mu1 - BESTspecific$mu2)
meanDiff_specific <- round(mean(Diff_specific), 3)
hdiDiff_specific <- hdi(BESTspecific$mu1 - BESTspecific$mu2)
plotAll(BESTspecific)
plot(BESTspecific, compVal=1, ROPE=rope)
summary(BESTspecific)
Diff_coarse <- (BESTcoarse$mu1 - BESTcoarse$mu2)
meanDiff_coarse <- round(mean(Diff_coarse), 3)
hdiDiff_coarse <- hdi(BESTcoarse$mu1 - BESTcoarse$mu2)
plotAll(BESTcoarse)
plot(BESTcoarse, compVal=1, ROPE=rope)
summary(BESTcoarse)
BESTcoarse, compVal=1, ROPE=rope
plot(BESTcoarse, compVal=1, ROPE=rope)
plot(BESTcoarse, ROPE=rope)
Diff_fine <- (BESTfine$mu1 - BESTfine$mu2)
meanDiff_fine <- round(mean(Diff_fine), 3)
hdiDiff_fine <- hdi(BESTfine$mu1 - BESTfine$mu2)
plotAll(BESTfine)
plot(BESTfine, ROPE=rope)
summary(BESTfine)
plot(BESTgeneric,ROPE=rope)
plot(BESTspecific, ROPE=rope)
plot(BESTcoarse, ROPE=rope)
plot(BESTfine, ROPE=rope)
plot(BESTgeneric,ROPE=rope)
plot(BESTspecific, ROPE=rope)
plot(BESTcoarse, ROPE=rope)
plot(BESTfine, ROPE=rope)
summary(BESTspecific)
BESTgeneric <- BESTmcmc(context_unaware_generic_concepts$concept, context_aware_generic_concepts$concept, priors=priors, parallel=TRUE)
BESTspecific <- BESTmcmc(context_unaware_specific_concepts$concept, context_aware_specific_concepts$concept, priors=priors, parallel=TRUE)
BESTcoarse <- BESTmcmc(context_unaware_coarse_contexts$context, context_aware_coarse_contexts$context, priors=priors, parallel=TRUE)
BESTfine <- BESTmcmc(context_unaware_fine_contexts$context, context_aware_fine_contexts$context, priors=priors, parallel=TRUE)
# check for convergence
print(BESTgeneric)
print(BESTspecific)
print(BESTcoarse)
print(BESTfine)
Diff_generic <- (BESTgeneric$mu1 - BESTgeneric$mu2)
meanDiff_generic <- round(mean(Diff_generic), 3)
hdiDiff_generic <- hdi(BESTgeneric$mu1 - BESTgeneric$mu2)
plotAll(BESTgeneric)
plot(BESTgeneric,ROPE=rope)
summary(BESTgeneric)
Diff_specific <- (BESTspecific$mu1 - BESTspecific$mu2)
meanDiff_specific <- round(mean(Diff_specific), 3)
hdiDiff_specific <- hdi(BESTspecific$mu1 - BESTspecific$mu2)
plotAll(BESTspecific)
plot(BESTspecific, ROPE=rope)
summary(BESTspecific)
Diff_coarse <- (BESTcoarse$mu1 - BESTcoarse$mu2)
meanDiff_coarse <- round(mean(Diff_coarse), 3)
hdiDiff_coarse <- hdi(BESTcoarse$mu1 - BESTcoarse$mu2)
plotAll(BESTcoarse)
plot(BESTcoarse, ROPE=rope)
summary(BESTcoarse)
Diff_fine <- (BESTfine$mu1 - BESTfine$mu2)
meanDiff_fine <- round(mean(Diff_fine), 3)
hdiDiff_fine <- hdi(BESTfine$mu1 - BESTfine$mu2)
plotAll(BESTfine)
plot(BESTfine, ROPE=rope)
summary(BESTfine)
plot(BESTfine, ROPE=rope)
plot(BESTfine, ROPE=rope)
plot(BESTcoarse, ROPE=rope)
plot(BESTspecific, ROPE=rope)
plot(BESTgeneric,ROPE=rope)
# CrI includes 0
# 95.9% probability that the difference in means is larger than 0 (pd)
# 6% in ROPE
BESTgeneric
# CrI includes 0
# 95.9% probability that the difference in means is larger than 0 (pd)
# 6% in ROPE
typeof(BESTgeneric)
write.csv(BESTgeneric, "BESTgeneric.csv", row.names=FALSE, quote=FALSE)
# save all models for reproducibility
write.csv(BESTgeneric, "BESTgeneric.csv", row.names=FALSE, quote=FALSE)
save(BESTgeneric,file="BESTgeneric.Rda")
write.csv(BESTspecific, "BESTspecific.csv", row.names=FALSE, quote=FALSE)
save(BESTspecific,file="BESTspecific.Rda")
write.csv(BESTgeneric, "BESTcoarse.csv", row.names=FALSE, quote=FALSE)
save(BESTgeneric,file="BESTcoarse.Rda")
write.csv(BESTgeneric, "BESTfine.csv", row.names=FALSE, quote=FALSE)
save(BESTgeneric,file="BESTfine.Rda")
load("BESTgeneric.Rda")
setwd(normalizePath(dirname(rstudioapi::getActiveDocumentContext()$path)))
library(BEST)
library(tidyverse)
agg_context <- df %>%
summarize(mean = mean(context),
sd = sd(context))
agg_concept <- df %>%
summarize(mean = mean(concept),
sd = sd(concept))
grand_mean <- (agg_context$mean + agg_concept$mean)/2
grand_sd <- (agg_context$sd + agg_concept$sd)/2
# calculate a region of practical equivalence with zero according to recommendation by Kruschke (2018)
rope <- c(-0.1*grand_sd, 0.1*grand_sd)
context_aware_generic_concepts <- df %>%
filter(index == 0, condition == 'context_aware') %>%
select(index, concept, condition)
context_unaware_generic_concepts <- df %>%
filter(index == 0, condition == 'context_unaware') %>%
select(index, concept, condition)
context_aware_specific_concepts <- df %>%
filter(index == 4, condition == 'context_aware') %>%
select(index, concept, condition)
context_unaware_specific_concepts <- df %>%
filter(index == 4, condition == 'context_unaware') %>%
select(index, concept, condition)
context_aware_coarse_contexts <- df %>%
filter(index == 0, condition == 'context_aware') %>%
select(index, context, condition)
context_unaware_coarse_contexts <- df %>%
filter(index == 0, condition == 'context_unaware') %>%
select(index, context, condition)
context_aware_fine_contexts <- df %>%
filter(index == 4, condition == 'context_aware') %>%
select(index, context, condition)
context_unaware_fine_contexts <- df %>%
filter(index == 4, condition == 'context_unaware') %>%
select(index, context, condition)
priors <- list(muM = grand_mean, muSD = grand_sd)
load("BESTgeneric.Rda")
# check for convergence
print(BESTgeneric)
load("BESTgeneric.Rda", "BESTspecific.Rda")
load(c("BESTgeneric.Rda", "BESTspecific.Rda"))
load("BESTspecific.Rda")
load("BESTcoarse.Rda")
load("BESTfine.Rda")
# either load or generate models
#load("BESTgeneric.Rda")
#load("BESTspecific.Rda")
#load("BESTcoarse.Rda")
#load("BESTfine.Rda")
BESTgeneric <- BESTmcmc(context_unaware_generic_concepts$concept, context_aware_generic_concepts$concept, priors=priors, parallel=TRUE)
# either load or generate models
load("BESTgeneric.Rda")
summary(BESTgeneric)
rope
summary(BESTspecific)
summary(BESTcoarse)
summary(BESTfine)
